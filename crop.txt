# function for cropping each detection and saving as new image

def crop_objects (img, data, path, allowed_classes): boxes, scores, classes, num_objects = data

www class_names = read_class_names (cfg. YOLO.CLASSES)

#create dictionary to hold count of objects for image name

counts = dict()

for i in range(num_objects):

# get count of class for part of image name

class_index = int(classes[i]) class_name = class_names [class_index]

if class_name in allowed_classes:

counts [class_name] = counts.get (class_name, 0) + 1

# get box coords

xmin, ymin, xmax, ymax = boxes[i]

# crop detection from image (take an additional 5 pixels around all edges) cropped_img img[int(ymin)-5:int(ymax)+5, int(xmin) -5: int(xmax)+5] =

# construct image name and join it to path for saving crop properly img_name = class_name + '_' + str(counts[class_name]) + '.png'

img_path = os. path.join(path, img_name )

# save image

Cv2.imwrite(img_path, cropped_img)

else:

continue






# custom allowed classes (uncomment line below to allow detections for only people)
        #allowed_classes = ['person']

        # if crop flag is enabled, crop each detection and save it as new image
        if FLAGS.crop:
            crop_rate = 150 # capture images every so many frames (ex. crop photos every 150 frames)
            crop_path = os.path.join(os.getcwd(), 'detections', 'crop', video_name)
            try:
                os.mkdir(crop_path)
            except FileExistsError:
                pass
            if frame_num % crop_rate == 0:
                final_path = os.path.join(crop_path, 'frame_' + str(frame_num))
                try:
                    os.mkdir(final_path)
                except FileExistsError:
                    pass          
                crop_objects(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB), pred_bbox, final_path, allowed_classes)
            else:
                pass